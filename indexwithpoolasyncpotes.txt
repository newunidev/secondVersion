const express = require('express');
const mysql = require('mysql');
 
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const app = express();
const port = 3000;

const MySQLConnection  = require('./mysqlconnection');

 

// Create a MySQL connection pool
const connection = new MySQLConnection();

// Middleware
app.use(bodyParser.json());

// Error handling for uncaught exceptions
process.on('uncaughtException', (error) => {
    console.error('Uncaught exception:', error);
});

// Error handling for unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled promise rejection:', reason);
});

// API Endpoint to Get Data
app.get('/api/data', async (req, res) => {
    try {
        const results = await connection.query('SELECT * FROM efficiency');
        res.json(results);
    } catch (error) {
        console.error('Error executing MySQL query:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// API Endpoint to Insert Data
app.post('/efficiency', async (req, res) => {
    try {
        let data = req.body;
        if (!(data.date instanceof Date)) {
            data.date = new Date(data.date);
        }
        data.date.setHours(0, 0, 0, 0);
        const query = 'INSERT INTO efficiency SET ?';
        const result = await connection.query(query, data);
        console.log('Data inserted successfully:', result);
        res.status(201).json({ message: 'Data inserted successfully' });
    } catch (error) {
        console.error('Error in POST /efficiency:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// API Endpoint to Get Data by Date and Branch ID
app.get('/api/branchDate', async (req, res) => {
    try {
        const { date, branchId } = req.query;

        // Check if both date and branchId are provided
        if (!date || !branchId) {
            return res.status(400).json({ error: 'Both date and branchId are required.' });
        }

        // Create a MySQL query to fetch data based on date and branchId
        const query = 'SELECT * FROM efficiency WHERE DATE(date) = ? AND branch_id = ?';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [date, branchId]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/branchDate:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});
  // API Endpoint to Get Data for Summer Income by Factory and Month
  app.get('/api/efficiency', async (req, res) => {
    try {
        const { branchId, month } = req.query;

        // Check if both branchId and month are provided
        if (!branchId || !month) {
            return res.status(400).json({ error: 'Both branchId and month are required.' });
        }

        // Ensure two digits for month
        const formattedMonth = month.toString().padStart(2, '0');

        // Create a MySQL query to fetch data based on branchId and month
        const query = 'SELECT * FROM efficiency WHERE branch_id = ? AND MONTH(date) = ?';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [branchId, formattedMonth]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/efficiency:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


//===================New Version With hourly Data update of the app APIS=============================//

//====Daily FIgures====//

  // API Endpoint to Insert Data to the dailyFigures Table
  app.post('/dailyfigures', async (req, res) => {
    try {
        let data = req.body;

        // Convert data.date to a Date object if it's not already one
        if (!(data.date instanceof Date)) {
            data.date = new Date(data.date);
        }

        // Set the time part of the date to zero
        data.date.setHours(0, 0, 0, 0);

        // Assuming 'daily_figures' is your table name
        const query = 'INSERT INTO daily_figures SET ?';

        // Execute the query with parameters using the MySQLConnection class
        const result = await connection.query(query, data);

        console.log('Data inserted successfully:', result);
        res.status(201).json({ message: 'Data inserted successfully' });
    } catch (error) {
        console.error('Error in POST /dailyfigures:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


  // API Endpoint to Get All DailyFigures
  app.get('/api/dailyfigures', async (req, res) => {
    try {
        const query = 'SELECT * FROM daily_figures';

        // Execute the query to fetch all daily figures using the MySQLConnection class
        const results = await connection.query(query);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/dailyfigures:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

  // API Endpoint to Get DailyFigures by Line Number, Date, and Factory
  app.get('/api/dailyfiguresbylinedatefactory', async (req, res) => {
    try {
        const { lineNo, date, factory } = req.query;

        // Check if line number, date, and factory are provided
        if (!lineNo || !date || !factory) {
            return res.status(400).json({ error: 'Line Number, Date, and Factory are required' });
        }

        // Create a MySQL query to fetch data based on line number, date, and factory
        const query = 'SELECT * FROM daily_figures WHERE line_no = ? AND DATE(date) = ? AND branch_id = ?';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [lineNo, date, factory]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/dailyfiguresbylinedatefactory:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


// This is for po test feature endpoint //

 // API Endpoint to Get DailyFigures by Line Number, Date, and Factory
 app.get('/api/dailyfiguresbylinedatefactorypono', async (req, res) => {
    try {
        const { lineNo, date, factory,poNo } = req.query;

        // Check if line number, date, and factory are provided
        if (!lineNo || !date || !factory || !poNo) {
            return res.status(400).json({ error: 'Line Number, Date,po and Factory are required' });
        }

        // Create a MySQL query to fetch data based on line number, date, and factory
        const query = 'SELECT * FROM daily_figures WHERE line_no = ? AND DATE(date) = ? AND branch_id = ? AND po_no=?';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [lineNo, date, factory,poNo]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET //api/dailyfiguresbylinedatefactorypono:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


//=======API FOR DASHBOARD Extra API for DailyFigures DE APP==============//

app.get('/api/dailyfiguresbydatefactory', async (req, res) => {
    try {
        const { date, factory } = req.query;

        // Check if date and factory are provided
        if (!date || !factory) {
            return res.status(400).json({ error: 'Date and Factory are required' });
        }

        const query = 'SELECT * FROM daily_figures WHERE DATE(date) = ? AND branch_id = ?';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [date, factory]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/dailyfiguresbydatefactory:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});



  //=====Testing for time disapble new feature====//

  // API Endpoint to Get DailyFigures by Line Number, Date, Style, and Factory
  app.get('/api/dailyfiguresbylinedatenstylefactorylineNo', async (req, res) => {
    try {
        const { lineNo, date, style, factory } = req.query;

        // Check if lineNo, date, style, and factory are provided
        if (!lineNo || !date || !style || !factory) {
            return res.status(400).json({ error: 'Line Number, Date, Style, and Factory are required' });
        }

        // Create a MySQL query to fetch data based on line number, date, style, and factory
        const query = 'SELECT * FROM daily_figures WHERE line_no = ? AND DATE(date) = ? AND style = ? AND branch_id = ?';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [lineNo, date, style, factory]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/dailyfiguresbylinedatenstylefactorylineNo:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


// API Endpoint to Get DailyFigures by Line Number, Date, Style, and Factory and po
app.get('/api/dailyfiguresbylinedatenstylefactorylineNoPo', async (req, res) => {
    try {
        const { lineNo, date, style, factory,poNo } = req.query;

        // Check if lineNo, date, style, and factory are provided
        if (!lineNo || !date || !style || !factory || !poNo) {
            return res.status(400).json({ error: 'Line Number, Date, Style, and Factory,PO are required' });
        }

        // Create a MySQL query to fetch data based on line number, date, style, and factory
        const query = 'SELECT * FROM daily_figures WHERE line_no = ? AND DATE(date) = ? AND style = ? AND branch_id = ? AND po_no=?';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [lineNo, date, style, factory,poNo]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/dailyfiguresbylinedatenstylefactorylineNo:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});



//API Endpoint for get All po numbers for the selected date and line no and factory (This is for update in hourly figures to select po number )

app.get('/api/dailyfiguresbylinedatefactorytogetpos', async (req, res) => {
    try {
        const { lineNo, date,factory } = req.query;

        // Check if lineNo, date, style, and factory are provided
        if (!lineNo || !date || !factory) {
            return res.status(400).json({ error: 'Line Number, Date,  and Factory are required' });
        }

        // Create a MySQL query to fetch data based on line number, date, style, and factory
        //const query = 'SELECT DISTINCT po_no FROM daily_figures WHERE line_no = ? AND DATE(date) = ? AND branch_id = ?';
        const query = 'SELECT DISTINCT po_no FROM daily_figures WHERE line_no = ? AND DATE(date) = ? AND branch_id = ?';


        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [lineNo, date,factory]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/dailyfiguresbylinedatefactory', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});




//=====API EndPoint for hourly Figures table=====//


// Endpoint to Add Data to Hourly Figures Table
app.post('/hourlyfigures', async (req, res) => {
    console.log('I am here');
    try {
        let data = req.body;

        // Convert data.date to a Date object if it's not already one
        if (!(data.date instanceof Date)) {
            data.date = new Date(data.date);
        }

        // Set the time part of the date to zero
        data.date.setHours(0, 0, 0, 0);

        // Assuming 'hourly_figures' is your table name
        const query = 'INSERT INTO hourly_figures SET ?';

        // Execute the query with parameters using the MySQLConnection class
        const result = await connection.query(query, data);

        console.log('Data inserted successfully:', result);
        res.status(201).json({ message: 'Data inserted successfully' });
    } catch (error) {
        console.error('Error in POST /hourlyfigures:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

  // API Endpoint to Get All Data from Hourly Figures Table
  app.get('/api/hourlyfigures', async (req, res) => {
    try {
        const query = 'SELECT * FROM hourly_figures';

        // Execute the query to retrieve all data from the hourly_figures table using the MySQLConnection class
        const results = await connection.query(query);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/hourlyfigures:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

  // API Endpoint to Get Hourly Figures by Line, Date, Factory, and Style
  app.get('/api/hourlyfiguresbylinedatefactorystyle', async (req, res) => {
    try {
        const { lineNo, date, style, factory } = req.query;

        // Check if all required parameters are provided
        if (!lineNo || !date || !style || !factory) {
            return res.status(400).json({ error: 'Line Number, Date, Style, and Factory are required' });
        }

        // Create a MySQL query to fetch data based on the provided parameters
        const query = 'SELECT * FROM hourly_figures WHERE line_no = ? AND DATE(date) = ? AND branch_id = ? AND style = ?';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [lineNo, date, factory, style]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/hourlyfiguresbylinedatefactorystyle:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

//==================UPdate for PO Number issue===============//


 // API Endpoint to Get Hourly Figures by Line, Date, Factory, and Style, and po no UPdate
 app.get('/api/hourlyfiguresbylinedatefactorystylepo', async (req, res) => {
    try {
        const { lineNo, date, style, factory,poNo } = req.query;

        // Check if all required parameters are provided
        if (!lineNo || !date || !style || !factory || !poNo) {
            return res.status(400).json({ error: 'Line Number, Date, Style, and FactoryPO are required' });
        }

        // Create a MySQL query to fetch data based on the provided parameters
        const query = 'SELECT * FROM hourly_figures WHERE line_no = ? AND DATE(date) = ? AND branch_id = ? AND style = ? AND po_no=?';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [lineNo, date, factory, style,poNo]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/hourlyfiguresbylinedatefactorystylepo:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

//========================end po issue===============================//


  // API Endpoint to Get Unique Lines and Styles by Date and Factory
  app.get('/api/linestylesbydatefactory', async (req, res) => {
    try {
        const { date, factory } = req.query;

        // Check if both date and factory are provided
        if (!date || !factory) {
            return res.status(400).json({ error: 'Date and factory are required' });
        }

        // Create a MySQL query to fetch distinct line numbers and styles based on date and factory
        const query = 'SELECT DISTINCT line_no, style FROM hourly_figures WHERE DATE(date) = ? AND branch_id = ? ORDER BY line_no, style';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [date, factory]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/linestylesbydatefactory:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


//==================UPdate for PO Number issue===============//

// API Endpoint to Get Unique Lines and Styles by Date and Factory with po update
app.get('/api/linestylesbydatefactorywithpo', async (req, res) => {
    try {
        const { date, factory} = req.query;

        // Check if both date and factory are provided
        if (!date || !factory) {
            return res.status(400).json({ error: 'Date and factory are required' });
        }

        // Create a MySQL query to fetch distinct line numbers and styles based on date and factory
        const query = 'SELECT DISTINCT line_no, style,po_no FROM hourly_figures WHERE DATE(date) = ? AND branch_id = ? ORDER BY line_no, style';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [date, factory]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/linestylesbydatefactorywithpo:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

//========================end po issue===============================//

// API Endpoint to Get Hourly Data with Time Slots by Date, Factory, Style, and Line Number
app.get('/api/hourlydataforviewtargetbydatefactorystyleline', async (req, res) => {
    
    try {
        const { date, factory, style, lineNo } = req.query;

        // Check if all required parameters are provided
        if (!date || !factory || !style || !lineNo) {
            return res.status(400).json({ error: 'Date, factory, style, and line number are required' });
        }

        // Create a MySQL query to fetch data based on factory, date, style, and line number
        const query = `
            SELECT hf.date, hf.branch_id, hf.line_no, hf.style, hf.hourqty, hf.hourslot, df.qty, df.mo, df.hel, df.iron, df.smv, df.forcast_pcs
            FROM hourly_figures hf
            JOIN daily_figures df ON hf.date = df.date AND hf.branch_id = df.branch_id AND hf.line_no = df.line_no AND hf.style = df.style
            WHERE hf.branch_id = ? AND DATE(hf.date) = ? AND df.line_no = ? AND df.style = ?
            ORDER BY hf.hourslot;
        `;

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [factory, date, lineNo, style]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/hourlydataforviewtargetbydatefactorystyleline:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


//==================UPdate for PO Number issue===============//

// API Endpoint to Get Hourly Data with Time Slots by Date, Factory, Style, and Line Number po update
app.get('/api/hourlydataforviewtargetbydatefactorystylelinewithpo', async (req, res) => {
    
    try {
        const { date, factory, style, lineNo,poNo } = req.query;

        // Check if all required parameters are provided
        if (!date || !factory || !style || !lineNo || !poNo) {
            return res.status(400).json({ error: 'Date, factory, style, and line number,po are required' });
        }

        // Create a MySQL query to fetch data based on factory, date, style, and line number
        const query = `
    SELECT hf.date, hf.branch_id, hf.line_no, hf.style, hf.hourqty, hf.hourslot, df.qty, df.mo, df.hel, df.iron, df.smv, df.forcast_pcs
    FROM hourly_figures hf
    JOIN daily_figures df ON hf.date = df.date 
                            AND hf.branch_id = df.branch_id 
                            AND hf.line_no = df.line_no 
                            AND hf.style = df.style
                            AND hf.po_no = df.po_no  -- Include comparison with po_no
    WHERE hf.branch_id = ? 
        AND DATE(hf.date) = ? 
        AND df.line_no = ? 
        AND df.style = ?
        AND hf.po_no = ?  -- Include comparison with po_no in the WHERE clause
    ORDER BY hf.hourslot;
`;

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [factory, date, lineNo, style,poNo]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/hourlydataforviewtargetbydatefactorystylelinewithpo:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

//========================end po issue===============================//


//==========APIS for hourly filling ui which blocks the already completed Styles and line from efficiency Table=========//

// API Endpoint to Get Completed Styles by Line, Date, and Factory
app.get('/api/stylescompletedbylinedatefactory', async (req, res) => {
    try {
        const { lineNo, date, factory } = req.query;

        // Check if all required parameters are provided
        if (!lineNo || !date || !factory) {
            return res.status(400).json({ error: 'Line number, date, and factory are required' });
        }

        // Create a MySQL query to fetch completed styles based on line number, date, and factory
        const query = 'SELECT style FROM efficiency WHERE line_no = ? AND date = ? AND branch_id = ?';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [lineNo, date, factory]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/stylescompletedbylinedatefactory:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


// API Endpoint to Get Completed Styles by Line, Date, and Factory  and PO
app.get('/api/stylescompletedbylinedatefactorywithpo', async (req, res) => {
    try {
        const { lineNo, date, factory,poNo } = req.query;

        // Check if all required parameters are provided
        if (!lineNo || !date || !factory || !poNo) {
            return res.status(400).json({ error: 'Line number, date, and factory,po are required' });
        }

        // Create a MySQL query to fetch completed styles based on line number, date, and factory
        const query = 'SELECT style,po_no FROM efficiency WHERE line_no = ? AND date = ? AND branch_id = ?AND po_no=?';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [lineNo, date, factory,poNo]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/stylescompletedbylinedatefactorywithpo:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


//API Endpoint to get all styles for given month from given factories for AUTOFillOPTION

app.get('/api/stylesbyfactorymonthforautocomplete', async (req, res) => {
    try {
        const { factory, month } = req.query;
        console.log(factory);
        console.log(month);

        // Check if the requested parameters are provided
        if (!factory || !month) {
            return res.status(400).json({ error: 'Factory or month required' });
        }

        // Create a MySQL query to fetch completed styles based on factory and month
        const query = 'SELECT DISTINCT style, po_no FROM daily_figures WHERE MONTH(date) = ? AND branch_id = ?';

        // Execute the query with parameters using the MySQLConnection class
        const results = await connection.query(query, [month, factory]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/stylesbyfactorymonthforautocomplete:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


//==================Monthly Income APIS======================//

// API Endpoint to Insert Data into Monthly Income
app.post('/monthlyIncome', async (req, res) => {
    try {
        let data = req.body;

        // Assuming 'monthly_target' is your table name
        const query = 'INSERT INTO monthly_target (branch_id, inc_month, inc_year, income, w_days) VALUES (?, ?, ?, ?, ?)';
        const result = await connection.query(query, [data.branch_id, data.inc_month, data.inc_year, data.income, data.w_days]);

        console.log('Data inserted successfully:', result);
        res.status(200).json({ message: 'Data inserted successfully' });
    } catch (error) {
        console.error('Error in POST /monthlyIncome:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// API Endpoint to Get All Data from Monthly Income
app.get('/api/monthlytarget', async (req, res) => {
    try {
        const query = 'SELECT * FROM monthly_target';
        const results = await connection.query(query);
        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/monthlytarget:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


// API Endpoint to Get Monthly Income by Factory and Year
app.get('/api/monthlyIncomebyfactoryyear', async (req, res) => {
    try {
        const { factory, year } = req.query;

        // Check if both factory and year are provided
        if (!factory || !year) {
            return res.status(400).json({ error: 'Year or factory is required' });
        }

        // Construct the SQL query to fetch data based on factory and year
        const query = `SELECT *
        FROM monthly_target
        WHERE branch_id = ? AND inc_year = ?`;

        // Execute the SQL query with parameters using the MySQLConnection class
        const results = await connection.query(query, [factory, year]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/monthlyIncomebyfactoryyear:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// API Endpoint to Get Monthly Income by Factory, Month, and Year
app.get('/api/monthlyIncomebyfactorymonthyear', async (req, res) => {
    try {
        const { factory, month, year } = req.query;

        // Check if both factory, month, and year are provided
        if (!factory || !month || !year) {
            return res.status(400).json({ error: 'Month, factory, or year is required' });
        }

        // Ensure two digits for month (e.g., '01' instead of '1')
        const formattedMonth = month.padStart(2, '0');

        // Construct the SQL query to fetch data based on factory, month, and year
        const query = `SELECT income, w_days
        FROM monthly_target
        WHERE branch_id = ? AND inc_month = ? AND inc_year = ?`;

        // Execute the SQL query with parameters using the MySQLConnection class
        const results = await connection.query(query, [factory, formattedMonth, year]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/monthlyIncomebyfactorymonthyear:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// API Endpoint to Get Daily Income from Monthly Input by Month and Factory
app.get('/api/efficiencyincomedailysumbymonthfactory', async (req, res) => {
    try {
        const { factory, month } = req.query;

        // Check if both factory and month are provided
        if (!factory || !month) {
            return res.status(400).json({ error: 'Month or factory is required' });
        }

        // Ensure two digits for month (e.g., '01' instead of '1')
        const formattedMonth = month.padStart(2, '0');

        // Construct the SQL query to fetch data based on factory and month
        const query = `
            SELECT 
                DATE_FORMAT(date, '%Y-%m-%d') AS \`Date\`,
                SUM(income) AS \`Total Income\`
            FROM 
                efficiency
            WHERE 
                branch_id = ? AND
                MONTH(date) = ?
            GROUP BY 
                DATE_FORMAT(date, '%Y-%m-%d')
            ORDER BY 
                \`Date\` ASC;`;

        // Execute the SQL query with parameters using the MySQLConnection class
        const results = await connection.query(query, [factory, formattedMonth]);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/efficiencyincomedailysumbymonthfactory:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});
//========================End Monthly Income API's======================//

//=========================Monthly Plance API's=========================//

 

app.post('/monthlyplan', async (req, res) => {
    try {
        let data = req.body;

        // Assuming 'monthly_plan' is your table name
        const query = 'INSERT IGNORE INTO monthly_plan (branch_id, pln_month, pln_year, line_no, style, po_no, qty, smv) VALUES ?';
        
        // Extracting values from the data array
        const values = data.map(plan => [plan.branch_id, plan.pln_month, plan.pln_year, plan.line_no, plan.style, plan.po_no, plan.qty, plan.smv]);
        
        // Assuming you are using a MySQL library like 'mysql2' to execute queries
        const result = await connection.query(query, [values]);

        console.log('Data inserted successfully:', result);
        res.status(200).json({ message: 'Data inserted successfully' });
    } catch (error) {
        console.error('Error in POST /monthlyplan:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});





//api endpoint for get po list based on the given factory,month,year and line no

app.get('/api/poNumbers', async (req, res) => {
    try {
        const { factory, month, year, lineNo } = req.query;

        // Check if all parameters are provided
        if (!factory || !month || !year || !lineNo) {
            return res.status(400).json({ error: 'Factory, month, year, and line number are required' });
        }

        // Construct the SQL query to fetch PO numbers based on the given parameters
        const query = `
            SELECT distinct po_no
            FROM monthly_plan
            WHERE branch_id = ? 
            AND pln_month = ? 
            AND pln_year = ? 
            AND line_no = ?`;

        // Execute the SQL query with parameters using the MySQLConnection class
        const results = await connection.query(query, [factory, month, year, lineNo]);

        // Extract the PO numbers from the results
        const poNumbers = results.map(row => row.po_no);
         

        res.json(poNumbers);
    } catch (error) {
        console.error('Error in GET /api/poNumbers:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


//API Endpoint to get styles based on po number, factory, month, year. 
app.get('/api/stylebyponumber', async (req, res) => {
    try {
        const { factory, month, year,poNo } = req.query;

        // Check if all parameters are provided
        if (!factory || !month || !year || !poNo) {
            return res.status(400).json({ error: 'Factory, month, year, and poNo are required' });
        }

        // Construct the SQL query to fetch PO numbers based on the given parameters
        const query = `
            SELECT distinct style
            FROM monthly_plan
            WHERE branch_id = ? 
            AND pln_month = ? 
            AND pln_year = ? 
            AND po_no = ?`;

        // Execute the SQL query with parameters using the MySQLConnection class
        const results = await connection.query(query, [factory, month, year, poNo]);

        // Extract the PO numbers from the results
        const style = results.map(row => row.style);
         

        res.json(style);
    } catch (error) {
        console.error('Error in GET /api/stylebyponumber:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }

});

 
//API endpoint for get smv and qty based on the factory, month, year, pono and style,lineno
//API Endpoint to get qty and smv based on factory, month, year, po_no, and style
app.get('/api/qtysmvbyponumberstyleline', async (req, res) => {
    try {
        const { factory, month, year, poNo, style,lineNo } = req.query;

        // Check if all parameters are provided
        if (!factory || !month || !year || !poNo || !style || !lineNo) {
            return res.status(400).json({ error: 'Factory, month, year, poNo, and style are required' });
        }

        // Construct the SQL query to fetch qty and smv based on the given parameters
        const query = `
            SELECT qty, smv
            FROM monthly_plan
            WHERE branch_id = ? 
            AND pln_month = ? 
            AND pln_year = ? 
            AND po_no = ? 
            AND style = ?
            AND line_no=?`;

        // Execute the SQL query with parameters using the MySQLConnection class
        const results = await connection.query(query, [factory, month, year, poNo, style,lineNo]);

        // Check if results are found
        if (results.length === 0) {
            return res.status(404).json({ error: 'No data found for the given parameters' });
        }

        // Extract qty and smv from the results
        const { qty, smv } = results[0];

        res.json({ qty, smv });
    } catch (error) {
        console.error('Error in GET /api/qtysmvbyponumberstyleline:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});





//=====================User API LIST ==========================//

app.post('/register', async (req, res) => {
    console.log(req.body);
    const { email, password, first_name, last_name, factory } = req.body;

    // Check if all required fields are provided
    if (!email || !password || !first_name || !last_name || !factory) {
        return res.status(400).json({ error: 'All fields are required for registration.' });
    }

    try {
        // Check if the user with the provided email already exists
        const checkUserQuery = 'SELECT * FROM users WHERE email = ?';
        const checkResults = await connection.query(checkUserQuery, [email]);

        // If the user already exists, inform the frontend
        if (checkResults && checkResults.length > 0) {
            return res.status(409).json({ error: 'User with this email already exists.' });
        }

        // Generate a random salt
        const saltRounds = 10;
        const salt = await bcrypt.genSalt(saltRounds);

        // Hash the password with the generated salt
        const hashedPassword = await bcrypt.hash(password, salt);

        // Create a MySQL query to insert user data into the 'users' table
        const insertUserQuery = 'INSERT INTO users (email, password_hash, salt, first_name, last_name, factory) VALUES (?, ?, ?, ?, ?, ?)';

        // Execute the query with parameters
        await connection.query(insertUserQuery, [email, hashedPassword, salt, first_name, last_name, factory]);

        console.log('User registered successfully');
        return res.status(201).json({ message: 'User registered successfully' });
    } catch (error) {
        console.error('Error registering user:', error);
        return res.status(500).json({ error: 'Internal Server Error' });
    }
});

// API Endpoint to Get All Users
app.get('/api/users', async (req, res) => {
    try {
        // Create a MySQL query to fetch all users
        const query = 'SELECT * FROM users';
        
        // Execute the query using async/await
        const results = await connection.query(query);

        res.json(results);
    } catch (error) {
        console.error('Error in GET /api/users:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

  // Validate login details API
  app.post('/login', async (req, res) => {
    const { email, password } = req.body;
  
    // Check if all required fields are provided
    if (!email || !password) {
      return res.status(400).json({ error: 'Both email and password are required for login.' });
    }
  
    try {
      // Fetch user from the database based on the provided email
      const query = 'SELECT * FROM users WHERE email = ?';
      const results = await connection.query(query, [email]);
      
      if (results.length === 0) {
        return res.status(401).json({ error: 'Invalid email or password.' });
      }
  
      const user = results[0];
  
      // Compare the provided password with the hashed password in the database
      const isPasswordValid = await bcrypt.compare(password, user.password_hash);
  
      if (!isPasswordValid) {
        return res.status(401).json({ error: 'Invalid email or password.' });
      }
  
      // If the password is valid, create a JWT token for authentication
      const token = jwt.sign({ userId: user.id, email: user.email }, 'your_secret_key', { expiresIn: '1h' });
  
      res.status(200).json({ token, expiresIn: 3600 });
    } catch (error) {
      console.error('Error during login:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
});


  // Get user's factory based on email
  app.get('/api/userFactory', async (req, res) => {
    try {
      const email = req.query.email;
  
      // Check if the user email is provided
      if (!email) {
        return res.status(400).json({ error: 'User Email is required.' });
      }
  
      // Create a MySQL query to fetch the factory of the user
      const query = 'SELECT factory FROM users WHERE email = ?';
  
      // Execute the query with parameters
      const results = await connection.query(query, [email]);
      
      if (results.length > 0) {
        // Send the factory as a JSON response
        res.json({ factory: results[0].factory });
      } else {
        // If no user is found with the given email
        res.status(404).json({ error: 'User not found' });
      }
    } catch (error) {
      console.error('Error in GET /api/userFactory:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
});

  // Delete user from the database
  app.delete('/deleteUser/:id', async (req, res) => {
    const userId = req.params.id;
  
    // Check if the user ID is provided
    if (!userId) {
      return res.status(400).json({ error: 'User ID is required for deletion.' });
    }
  
    try {
      // Create a MySQL query to delete the user from the 'users' table
      const deleteUserQuery = 'DELETE FROM users WHERE id = ?';
  
      // Execute the query with parameters
      const result = await connection.query(deleteUserQuery, [userId]);
      
      // Check if any rows were affected
      if (result.affectedRows > 0) {
        console.log('User deleted successfully:', result);
        return res.status(200).json({ message: 'User deleted successfully' });
      } else {
        // If no rows were affected, the user with the given ID was not found
        return res.status(404).json({ error: 'User not found' });
      }
    } catch (error) {
      console.error('Error deleting user:', error);
      return res.status(500).json({ error: 'Internal Server Error' });
    }
});

  //catch exceptions and keep server on
process.on('uncaughtException', (error) => {
    console.error('Uncaught exception:', error);
    // You can log the error or perform any necessary cleanup here
  });
  
  // Handle unhandled promise rejections globally
  
  process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled promise rejection:', reason);
    // You can log the reason or perform any necessary cleanup here
  });



// Other API Endpoints...
// Define your other API endpoints here

// Start the server
app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});
